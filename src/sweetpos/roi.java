package sweetpos;

//import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.awt.*;
import java.awt.event.KeyEvent;
//import java.awt.Color;
//import java.awt.Font;
import java.sql.*;
//import java.sql.Connection;
//import java.sql.ResultSet;
//import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;
//import java.sql.DriverManager;
//import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import javaswingdev.drawer.Drawer;
import javaswingdev.drawer.DrawerController;
import javaswingdev.drawer.DrawerItem;
import javaswingdev.drawer.EventDrawer;

public class roi extends javax.swing.JFrame {

    /**
     * Creates new form category
     */
    private DrawerController drawer;
    String name1;
    
    public roi(String name) {
        initComponents();
        tableHeader();
        getDrawer();
        getContentPane().setBackground(new java.awt.Color(255, 255, 255));
        addButton.setEnabled(false);
        deleteButton.setEnabled(false);
        this.name1 = name;
        nameLabel.setText(name);
    }

    Connection con1;
    PreparedStatement insert;
    ResultSet rs;
    DefaultTableModel model = new DefaultTableModel();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        pro_IDLabel = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        pro_NameLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        qtyLabel = new javax.swing.JLabel();
        txtquantity = new javax.swing.JTextField();
        txtname = new javax.swing.JLabel();
        txtprice = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        payLabel = new javax.swing.JLabel();
        cashLabel = new javax.swing.JLabel();
        balLabel = new javax.swing.JLabel();
        txtcash = new javax.swing.JTextField();
        txtpayable = new javax.swing.JLabel();
        endButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtbalance = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));

        menuButton.setBackground(new java.awt.Color(255, 255, 255));
        menuButton.setForeground(new java.awt.Color(255, 255, 255));
        menuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/menuIcon.png"))); // NOI18N
        menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Milky Nice", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supply ID", "Supply Name", "Price", "Quantity", "Total Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        pro_IDLabel.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        pro_IDLabel.setForeground(new java.awt.Color(50, 80, 255));
        pro_IDLabel.setText("Supply ID:");

        txtid.setFont(new java.awt.Font("Milky Nice", 0, 14)); // NOI18N
        txtid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtidKeyPressed(evt);
            }
        });

        pro_NameLabel.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        pro_NameLabel.setForeground(new java.awt.Color(50, 80, 255));
        pro_NameLabel.setText("Supply Name:");

        priceLabel.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(50, 80, 255));
        priceLabel.setText("Price:");

        qtyLabel.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        qtyLabel.setForeground(new java.awt.Color(50, 80, 255));
        qtyLabel.setText("Quantity:");

        txtquantity.setFont(new java.awt.Font("Milky Nice", 0, 14)); // NOI18N
        txtquantity.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtname.setFont(new java.awt.Font("Milky Nice", 1, 18)); // NOI18N
        txtname.setForeground(new java.awt.Color(0, 0, 0));
        txtname.setText("(Enter ID and Press Enter)");

        txtprice.setFont(new java.awt.Font("Milky Nice", 1, 18)); // NOI18N
        txtprice.setForeground(new java.awt.Color(0, 0, 0));
        txtprice.setText("(Enter ID and Press Enter)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(pro_IDLabel)
                .addGap(18, 18, 18)
                .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pro_NameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtname)
                .addGap(18, 18, 18)
                .addComponent(priceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtprice)
                .addGap(18, 18, 18)
                .addComponent(qtyLabel)
                .addGap(18, 18, 18)
                .addComponent(txtquantity, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pro_IDLabel)
                    .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtquantity, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pro_NameLabel)
                            .addComponent(txtname)
                            .addComponent(priceLabel)
                            .addComponent(txtprice)
                            .addComponent(qtyLabel))))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Release of Items");

        payLabel.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        payLabel.setForeground(new java.awt.Color(50, 80, 255));
        payLabel.setText("Total Amount Payable:");

        cashLabel.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        cashLabel.setForeground(new java.awt.Color(50, 80, 255));
        cashLabel.setText("Cash:");

        balLabel.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        balLabel.setForeground(new java.awt.Color(50, 80, 255));
        balLabel.setText("Balance:");

        txtcash.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        txtcash.setForeground(new java.awt.Color(0, 0, 0));
        txtcash.setText("0");

        txtpayable.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        txtpayable.setForeground(new java.awt.Color(0, 0, 0));
        txtpayable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/pesoIcon.png"))); // NOI18N
        txtpayable.setText("0");

        endButton.setBackground(new java.awt.Color(255, 75, 85));
        endButton.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        endButton.setForeground(new java.awt.Color(255, 255, 255));
        endButton.setText("Finalize Inventory Changes");
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButtonActionPerformed(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(50, 80, 255));
        addButton.setFont(new java.awt.Font("Milky Nice", 0, 18)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("+ Add Item");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(255, 75, 85));
        deleteButton.setFont(new java.awt.Font("Milky Nice", 0, 18)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("X Delete Item");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/pesoIcon.png"))); // NOI18N

        txtbalance.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        txtbalance.setForeground(new java.awt.Color(0, 0, 0));
        txtbalance.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/pesoIcon.png"))); // NOI18N
        txtbalance.setText("0");

        nameLabel.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(50, 80, 255));
        nameLabel.setText(" ");
        nameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cashLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtcash, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(balLabel)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(txtbalance))
                                                    .addComponent(payLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(txtpayable))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(endButton, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1024, 1024, 1024)
                                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 24, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(menuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nameLabel))))
                .addGap(42, 42, 42)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cashLabel)
                                .addComponent(jLabel2))
                            .addComponent(txtcash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(payLabel)
                            .addComponent(txtpayable))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(balLabel)
                            .addComponent(txtbalance))
                        .addGap(60, 60, 60)
                        .addComponent(endButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
  
        private void tableHeader() {
                JTableHeader tableHeader = jTable1.getTableHeader();
                tableHeader.setBackground(Color.white);
                tableHeader.setForeground(Color.black);
                tableHeader.setFont(new Font("Milky Nice", Font.PLAIN, 14));
        }
        
        private void roi() {
            String name = txtid.getText();

            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                con1 = DriverManager.getConnection("jdbc:mysql://localhost/sweetdb","root","");
                insert = con1.prepareStatement("select * from supplies where supply_id = ?");
                insert.setString(1, name);
                rs = insert.executeQuery();

                while (rs.next()) {
                    int availableQty = rs.getInt("quantity");
                    int price = Integer.parseInt(txtprice.getText());
                    int requestedQty = Integer.parseInt(txtquantity.getText());
                    int total = price * requestedQty;
                    
                    //Displays message dialog if inputted quantity exceeds the quantity in the database
                    if (requestedQty > availableQty) {
                    JOptionPane.showMessageDialog(this, "Not enough stocks on inventory!\n" +
                        "Available stocks: " + availableQty);
                    }
                    
                    else {
                        model = (DefaultTableModel) jTable1.getModel();
                        model.addRow(new Object[]{
                            txtid.getText(),
                            txtname.getText(),
                            txtprice.getText(),
                            txtquantity.getText(),
                            total
                    });

                    // Recalculate the total amount    
                    int sum = calculateTotal();
                    txtpayable.setText(Integer.toString(sum));
                    
                    // Clear the input fields
                    txtid.setText("");
                    txtname.setText("(Enter ID and Press Enter)");
                    txtprice.setText("(Enter ID and Press Enter)");
                    txtquantity.setText("");
                    addButton.setEnabled(false);
                    }
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(roi.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(roi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    //Calculates the total amount in the table
    private int calculateTotal() {
    int sum = 0;
    
    for (int i = 0; i < jTable1.getRowCount(); i++) {
        sum += Integer.parseInt(jTable1.getValueAt(i, 4).toString());
    }
    
    return sum;
    }
    
    private void getDrawer() {
        drawer = Drawer.newDrawer(this)
                .header(new Header())
                .space(30)
                .background(new Color(185,210,250))
                .backgroundTransparent(0.3f)
                .drawerWidth(300)
                .duration(200)
                .enableScroll(true)
                .drawerBackground(new Color(185,210,250))
                
                .addChild(new DrawerItem("Category")
                        .icon(new ImageIcon(getClass().getResource("/icons/Category.gif")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                .addChild(new DrawerItem("Products")
                        .icon(new ImageIcon(getClass().getResource("/icons/Cookie.gif")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                .addChild(new DrawerItem("Inventory")
                        .icon(new ImageIcon(getClass().getResource("/icons/Inventory.gif")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                .addChild(new DrawerItem("Release of Items")
                        .icon(new ImageIcon(getClass().getResource("/icons/releaseItem.gif")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                .addChild(new DrawerItem("  Point of Sales")
                        .icon(new ImageIcon(getClass().getResource("/icons/Receipt.gif")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                .addFooter(new DrawerItem("Exit")
                        .icon(new ImageIcon(getClass().getResource("/icons/exitIcon.png")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                        .event(new EventDrawer() {
                            @Override
                            public void selected(int index, DrawerItem item) {
                                if (item.getLabel().equals("Products")) {
                                    roi.this.setVisible(false);
                                    products r = new products(name1);
                                    r.setVisible(true);
                                }
                                if (item.getLabel().equals("Inventory")) {
                                    roi.this.setVisible(false);
                                    inventory i = new inventory(name1);
                                    i.setVisible(true);
                                }
                                if (item.getLabel().equals("  Point of Sales")) {
                                    roi.this.setVisible(false);
                                    pos p = new pos(name1);
                                    p.setVisible(true);
                                }
                                if (item.getLabel().equals("Category")) {
                                    roi.this.setVisible(false);
                                    category c = new category(name1);
                                    c.setVisible(true);
                                }
                                if (item.getLabel().equals("Exit")) {
                                    int dialogResult = JOptionPane.showConfirmDialog(null, "Do you want to exit the program?", "Warning", JOptionPane.YES_NO_OPTION);
                                    if (dialogResult == JOptionPane.YES_OPTION) {
                                    System.exit(0);
                                    }
                                }
                        }
                })
                .build();
    }
    
    private void menuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuButtonActionPerformed
        if(drawer.isShow()) {
            drawer.hide();
        } else {
            drawer.show();
        }
    }//GEN-LAST:event_menuButtonActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
        int selectIndex = jTable1.getSelectedRow();

        txtid.setText(d1.getValueAt(selectIndex, 0).toString());
        txtname.setText(d1.getValueAt(selectIndex, 1).toString());
        txtprice.setText(d1.getValueAt(selectIndex, 2).toString());
        txtquantity.setText(d1.getValueAt(selectIndex, 3).toString());
        deleteButton.setEnabled(true);
    }//GEN-LAST:event_jTable1MouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        roi();
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        model.removeRow(jTable1.getSelectedRow());
        int sum = 0;
        
        for(int i = 0; i < jTable1.getRowCount(); i++) {
            sum = sum + Integer.parseInt(jTable1.getValueAt(i, 4).toString());
        }
        
        txtpayable.setText(Integer.toString(sum));
        deleteButton.setEnabled(false);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void stock() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
        LocalDateTime currentDateTime = LocalDateTime.now();
        String date = dtf.format(currentDateTime);
        String payable = txtpayable.getText();
        String cash = txtcash.getText();
        String balance = txtbalance.getText();
        int lastInsertId = 0;
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/sweetdb","root","");
            String query = "insert into stock(date,username,subtotal,cash,balance)values(?,?,?,?,?)";
            insert = con1.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            insert.setString(1, date);
            insert.setString(2, name1);
            insert.setString(3, payable);
            insert.setString(4, cash);
            insert.setString(5, balance);
            insert.executeUpdate();
            ResultSet generatedKeyResult = insert.getGeneratedKeys();
            
            if(generatedKeyResult.next()) {
                lastInsertId = generatedKeyResult.getInt(1);
            }
            
            String query1 = "insert into stock_supply(stock_id, supply_id, price, qty, total) values(?,?,?,?,?)";
            insert = con1.prepareStatement(query1);
            String supply_id = "";
            String price = "";
            String qty = "";
            int total = 0;
            
            for(int i = 0; i < jTable1.getRowCount(); i++) {
                supply_id = (String)jTable1.getValueAt(i, 0);
                price = (String)jTable1.getValueAt(i, 2);
                qty = (String)jTable1.getValueAt(i, 3);
                total = (int)jTable1.getValueAt(i, 4);
                
                insert.setInt(1, lastInsertId);
                insert.setString(2, supply_id);
                insert.setString(3, price);
                insert.setString(4, qty);
                insert.setInt(5, total);
                insert.executeUpdate();
            }
            
            String query2 = "update supplies set quantity = quantity - ? where supply_id = ?";
            insert = con1.prepareStatement(query2);
            
            for(int i = 0; i < jTable1.getRowCount(); i++) {
                supply_id = (String)jTable1.getValueAt(i, 0);
                qty = (String)jTable1.getValueAt(i, 3);
                
                insert.setString(1, qty);
                insert.setString(2, supply_id);
                insert.execute();
            }
            
            insert.addBatch();
            JOptionPane.showMessageDialog(this, "Record Saved!");
            String query3 = "delete from supplies where quantity = 0";
            insert = con1.prepareStatement(query3);
            insert.execute();
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(roi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(roi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void endButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endButtonActionPerformed
        int cash = Integer.parseInt(txtcash.getText());
        int payable = Integer.parseInt(txtpayable.getText());
        int balance = cash - payable;
        if(isQuantityExceeded()){
            JOptionPane.showMessageDialog(this, "Transaction cancelled!");
            return;
        }
        
        txtbalance.setText(String.valueOf(balance));
        stock();
    }//GEN-LAST:event_endButtonActionPerformed

    private boolean isQuantityExceeded() {
        Map<String, Integer> requestedQuantities = new HashMap<>();

        for (int i = 0; i < jTable1.getRowCount(); i++) {
            String supply_id = (String) jTable1.getValueAt(i, 0);
            int requestedQty = Integer.parseInt(jTable1.getValueAt(i, 3).toString());
            requestedQuantities.put(supply_id, requestedQuantities.getOrDefault(supply_id, 0) + requestedQty);
        }

        for (Map.Entry<String, Integer> entry : requestedQuantities.entrySet()) {
            String supply_id = entry.getKey();
            int requestedQty = entry.getValue();

            try {
                insert = con1.prepareStatement("select quantity from supplies where supply_id = ?");
                insert.setString(1, supply_id);
                rs = insert.executeQuery();

                if (rs.next()) {
                    int availableQty = rs.getInt("quantity");
                    if (requestedQty > availableQty) {
                        JOptionPane.showMessageDialog(this, "Not enough stocks on inventory for product ID " + supply_id + "!\n" +
                                "Available stocks: " + availableQty + "\n" +
                                "Inputted quantity: " + requestedQty);
                        return true; // Quantity exceeded for this product
                    }
                }
                
            } catch (SQLException ex) {
                Logger.getLogger(pos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return false; // No product exceeded the quantity
    }
    
    
    private void txtidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtidKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String name = txtid.getText();
            addButton.setEnabled(true);
            
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                con1 = DriverManager.getConnection("jdbc:mysql://localhost/sweetdb","root","");
                insert = con1.prepareStatement("select * from supplies where supply_id = ?");
                insert.setString(1, name);
                rs = insert.executeQuery();
                
                if (rs.next()==false) {
                    JOptionPane.showMessageDialog(rootPane, "Product ID not found!");
                    txtid.setText("");
                    addButton.setEnabled(false);
                }
                
                else {
                    String supply_name = rs.getString("supply_name");
                    String price = rs.getString("price");
                    txtname.setText(supply_name.trim());
                    txtprice.setText(price.trim());
                }
                
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(roi.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(roi.class.getName()).log(Level.SEVERE, null, ex);
            }
                
        }
    }//GEN-LAST:event_txtidKeyPressed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(roi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(roi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(roi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(roi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SplashScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel balLabel;
    private javax.swing.JLabel cashLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton endButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton menuButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel payLabel;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel pro_IDLabel;
    private javax.swing.JLabel pro_NameLabel;
    private javax.swing.JLabel qtyLabel;
    private javax.swing.JLabel txtbalance;
    private javax.swing.JTextField txtcash;
    private javax.swing.JTextField txtid;
    private javax.swing.JLabel txtname;
    private javax.swing.JLabel txtpayable;
    private javax.swing.JLabel txtprice;
    private javax.swing.JTextField txtquantity;
    // End of variables declaration//GEN-END:variables
}
