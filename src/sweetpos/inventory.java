package sweetpos;

//import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.awt.*;
//import java.awt.Color;
//import java.awt.Font;
import java.sql.*;
//import java.sql.Connection;
//import java.sql.ResultSet;
//import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;
//import java.sql.DriverManager;
//import java.sql.SQLException;
import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javaswingdev.drawer.Drawer;
import javaswingdev.drawer.DrawerController;
import javaswingdev.drawer.DrawerItem;
import javaswingdev.drawer.EventDrawer;

public class inventory extends javax.swing.JFrame {

    /**
     * Creates new form category
     */
    private DrawerController drawer;
    String name1;
    
    public inventory(String name) {
        initComponents();
        table_update();
        getDrawer();
        getContentPane().setBackground(new java.awt.Color(255, 255, 255));
        this.name1 = name;
        nameLabel.setText(name);
    }
    
    Connection con1;
    PreparedStatement pst;
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        catLabel = new javax.swing.JLabel();
        addButton1 = new javax.swing.JButton();
        deleteButton1 = new javax.swing.JButton();
        updateButton1 = new javax.swing.JButton();
        txtname = new javax.swing.JTextField();
        name = new javax.swing.JLabel();
        txtquantity = new javax.swing.JTextField();
        catLabel2 = new javax.swing.JLabel();
        txttype = new javax.swing.JComboBox();
        txtprice = new javax.swing.JTextField();
        catLabel3 = new javax.swing.JLabel();
        catLabel4 = new javax.swing.JLabel();
        txtdateadd = new javax.swing.JTextField();
        catLabel5 = new javax.swing.JLabel();
        txtdateexp = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));

        menuButton.setBackground(new java.awt.Color(255, 255, 255));
        menuButton.setForeground(new java.awt.Color(255, 255, 255));
        menuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/menuIcon.png"))); // NOI18N
        menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Milky Nice", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Supply ID", "Supply Type", "Supply Name", "Quantity", "Price", "Date Added", "Expiry Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        catLabel.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        catLabel.setForeground(new java.awt.Color(50, 80, 255));
        catLabel.setText("Supply Type:");

        addButton1.setBackground(new java.awt.Color(50, 80, 255));
        addButton1.setFont(new java.awt.Font("Milky Nice", 0, 14)); // NOI18N
        addButton1.setForeground(new java.awt.Color(255, 255, 255));
        addButton1.setText("+ Add Supply");
        addButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButton1ActionPerformed(evt);
            }
        });

        deleteButton1.setBackground(new java.awt.Color(255, 75, 85));
        deleteButton1.setFont(new java.awt.Font("Milky Nice", 0, 14)); // NOI18N
        deleteButton1.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton1.setText("X Delete Supply");
        deleteButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButton1ActionPerformed(evt);
            }
        });

        updateButton1.setBackground(new java.awt.Color(50, 80, 255));
        updateButton1.setFont(new java.awt.Font("Milky Nice", 0, 14)); // NOI18N
        updateButton1.setForeground(new java.awt.Color(255, 255, 255));
        updateButton1.setText("Update Supply");
        updateButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButton1ActionPerformed(evt);
            }
        });

        txtname.setFont(new java.awt.Font("Milky Nice", 0, 12)); // NOI18N
        txtname.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        name.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        name.setForeground(new java.awt.Color(50, 80, 255));
        name.setText("Supply Name:");

        txtquantity.setFont(new java.awt.Font("Milky Nice", 0, 12)); // NOI18N
        txtquantity.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        catLabel2.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        catLabel2.setForeground(new java.awt.Color(50, 80, 255));
        catLabel2.setText("Quantity:");

        txttype.setFont(new java.awt.Font("Milky Nice", 0, 12)); // NOI18N
        txttype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ingredients Supplies", "Packaging Supplies" }));

        txtprice.setFont(new java.awt.Font("Milky Nice", 0, 12)); // NOI18N
        txtprice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        catLabel3.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        catLabel3.setForeground(new java.awt.Color(50, 80, 255));
        catLabel3.setText("Price:");

        catLabel4.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        catLabel4.setForeground(new java.awt.Color(50, 80, 255));
        catLabel4.setText("Date Added:");

        txtdateadd.setFont(new java.awt.Font("Milky Nice", 0, 12)); // NOI18N
        txtdateadd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        catLabel5.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        catLabel5.setForeground(new java.awt.Color(50, 80, 255));
        catLabel5.setText("Expiry Date:");

        txtdateexp.setFont(new java.awt.Font("Milky Nice", 0, 12)); // NOI18N
        txtdateexp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(catLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtquantity, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(catLabel3)
                            .addComponent(name))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtprice)))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(addButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(updateButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(deleteButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(catLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txttype, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(13, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(catLabel5))
                            .addComponent(catLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtdateadd, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(txtdateexp))
                        .addGap(28, 28, 28))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(name)
                    .addComponent(txtname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txttype, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(catLabel)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtquantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(catLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtprice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(catLabel3)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(catLabel4)
                            .addComponent(txtdateadd, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtdateexp, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(catLabel5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Inventory");

        nameLabel.setFont(new java.awt.Font("Milky Nice", 0, 24)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(50, 80, 255));
        nameLabel.setText(" ");
        nameLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(menuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(menuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nameLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void table_update() {
        try {
            int c;
            
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                con1 = DriverManager.getConnection("jdbc:mysql://localhost/sweetdb","root","");
                pst = con1.prepareStatement("select * from supplies");
                ResultSet rs = pst.executeQuery();
                
                ResultSetMetaData rsd = rs.getMetaData();
                c = rsd.getColumnCount();
                
                DefaultTableModel d = (DefaultTableModel)jTable1.getModel();
                d.setRowCount(0);
                jTable1.setDefaultEditor(Object.class, null);
                
                JTableHeader tableHeader = jTable1.getTableHeader();
                tableHeader.setBackground(Color.white);
                tableHeader.setForeground(Color.black);
                Font headerFont = new Font("Milky Nice", Font.PLAIN, 14);
                tableHeader.setFont(headerFont);
                
                while(rs.next()) {
                    Vector v2 = new Vector();
                    for (int i = 1; i<=c; i++) {
                        v2.add(rs.getString("supply_id"));
                        v2.add(rs.getString("type"));
                        v2.add(rs.getString("supply_name"));
                        v2.add(rs.getString("quantity"));
                        v2.add(rs.getString("price"));
                        v2.add(rs.getString("date_added"));
                        v2.add(rs.getString("expiry_date"));
                    }
                    d.addRow(v2);
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException ex) {
            Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void getDrawer() {
        drawer = Drawer.newDrawer(this)
                .header(new Header())
                .space(30)
                .background(new Color(185,210,250))
                .backgroundTransparent(0.3f)
                .drawerWidth(300)
                .duration(200)
                .enableScroll(true)
                .drawerBackground(new Color(185,210,250))
                
                .addChild(new DrawerItem("Category")
                        .icon(new ImageIcon(getClass().getResource("/icons/Category.gif")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                .addChild(new DrawerItem("Products")
                        .icon(new ImageIcon(getClass().getResource("/icons/Cookie.gif")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                .addChild(new DrawerItem("Inventory")
                        .icon(new ImageIcon(getClass().getResource("/icons/Inventory.gif")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                .addChild(new DrawerItem("Release of Items")
                        .icon(new ImageIcon(getClass().getResource("/icons/releaseItem.gif")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                .addChild(new DrawerItem("  Point of Sales")
                        .icon(new ImageIcon(getClass().getResource("/icons/Receipt.gif")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                .addFooter(new DrawerItem("Exit")
                        .icon(new ImageIcon(getClass().getResource("/icons/exitIcon.png")))
                        .font(new Font("Milky Nice", Font.PLAIN, 14))
                        .build())
                        .event(new EventDrawer() {
                            @Override
                            public void selected(int index, DrawerItem item) {
                                if (item.getLabel().equals("Category")) {
                                    inventory.this.setVisible(false);
                                    category c = new category(name1);
                                    c.setVisible(true);
                                }
                                if (item.getLabel().equals("Products")) {
                                    inventory.this.setVisible(false);
                                    products r = new products(name1);
                                    r.setVisible(true);
                                }
                                if (item.getLabel().equals("Release of Items")) {
                                    inventory.this.setVisible(false);
                                    roi o = new roi(name1);
                                    o.setVisible(true);
                                }
                                if (item.getLabel().equals("  Point of Sales")) {
                                    inventory.this.setVisible(false);
                                    pos p = new pos(name1);
                                    p.setVisible(true);
                                }
                                if (item.getLabel().equals("Exit")) {
                                    int dialogResult = JOptionPane.showConfirmDialog(null, "Do you want to exit the program?", "Warning", JOptionPane.YES_NO_OPTION);
                                    if (dialogResult == JOptionPane.YES_OPTION) {
                                    System.exit(0);
                                    }
                                }
                        }
                })
                .build();
    }
    
    private void menuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuButtonActionPerformed
        if(drawer.isShow()) {
            drawer.hide();
        } else {
            drawer.show();
        }
    }//GEN-LAST:event_menuButtonActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
        int selectIndex = jTable1.getSelectedRow();
        
        txttype.setSelectedItem(d1.getValueAt(selectIndex, 1).toString());
        txtname.setText(d1.getValueAt(selectIndex, 2).toString());
        txtquantity.setText(d1.getValueAt(selectIndex, 3).toString());
        txtprice.setText(d1.getValueAt(selectIndex, 4).toString());
        txtdateadd.setText(d1.getValueAt(selectIndex, 5).toString());
        txtdateexp.setText(d1.getValueAt(selectIndex, 6).toString());
    }//GEN-LAST:event_jTable1MouseClicked

    private void addButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButton1ActionPerformed
        String type = txttype.getSelectedItem().toString();
        String name = txtname.getText();
        String quantity = txtquantity.getText();
        String price = txtprice.getText();
        String date_added = txtdateadd.getText();
        String expiry_date = txtdateexp.getText();
        
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/sweetdb","root","");
            pst = con1.prepareStatement("insert into supplies(type,supply_name,quantity,price,date_added,expiry_date)values(?,?,?,?,?,?)");
            pst.setString(1, type);
            pst.setString(2, name);
            pst.setString(3, quantity);
            pst.setString(4, price);
            pst.setString(5, date_added);
            pst.setString(6, expiry_date);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Supply successfully added!");
            table_update();
            txttype.setSelectedIndex(-1);
            txtname.setText("");
            txtquantity.setText("");
            txtprice.setText("");
            txtdateadd.setText("");
            txtdateexp.setText("");
            txtname.requestFocus();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addButton1ActionPerformed

    private void deleteButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButton1ActionPerformed
        DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
        int selectIndex = jTable1.getSelectedRow();
        int id = Integer.parseInt(d1.getValueAt(selectIndex, 0).toString());
        int dialogResult = JOptionPane.showConfirmDialog(null, "Do you want to delete the record?", "Warning", JOptionPane.YES_NO_OPTION);

        if (dialogResult == JOptionPane.YES_OPTION) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                con1 = DriverManager.getConnection("jdbc:mysql://localhost/sweetdb","root","");
                pst = con1.prepareStatement("delete from supplies where supply_id = ?");
                pst.setInt(1, id);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null, "Supply successfully deleted!");
                table_update();
                txttype.setSelectedIndex(-1);
                txtname.setText("");
                txtquantity.setText("");
                txtprice.setText("");
                txtdateadd.setText("");
                txtdateexp.setText("");
                txtname.requestFocus();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deleteButton1ActionPerformed

    private void updateButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButton1ActionPerformed
        DefaultTableModel d1 = (DefaultTableModel)jTable1.getModel();
        int selectIndex = jTable1.getSelectedRow();
        int supply_id = Integer.parseInt(d1.getValueAt(selectIndex, 0).toString());
        String type = txttype.getSelectedItem().toString();
        String name = txtname.getText();
        String quantity = txtquantity.getText();
        String price = txtprice.getText();
        String date_added = txtdateadd.getText();
        String expiry_date = txtdateexp.getText();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost/sweetdb","root","");
            pst = con1.prepareStatement("update supplies set type = ?, supply_name = ?, quantity = ?, price = ?, date_added = ?, expiry_date = ? where supply_id = ?");
            pst.setString(1, type);
            pst.setString(2, name);
            pst.setString(3, quantity);
            pst.setString(4, price);
            pst.setString(5, date_added);
            pst.setString(6, expiry_date);
            pst.setInt(7, supply_id);
            pst.executeUpdate();
            JOptionPane.showMessageDialog(null, "Supply successfully updated!");
            table_update();
            txttype.setSelectedIndex(-1);
            txtname.setText("");
            txtquantity.setText("");
            txtprice.setText("");
            txtdateadd.setText("");
            txtdateexp.setText("");
            txtname.requestFocus();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(inventory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateButton1ActionPerformed
       
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate=txtname" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SplashScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton1;
    private javax.swing.JLabel catLabel;
    private javax.swing.JLabel catLabel2;
    private javax.swing.JLabel catLabel3;
    private javax.swing.JLabel catLabel4;
    private javax.swing.JLabel catLabel5;
    private javax.swing.JButton deleteButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton menuButton;
    private javax.swing.JLabel name;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField txtdateadd;
    private javax.swing.JTextField txtdateexp;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtprice;
    private javax.swing.JTextField txtquantity;
    private javax.swing.JComboBox txttype;
    private javax.swing.JButton updateButton1;
    // End of variables declaration//GEN-END:variables
}
